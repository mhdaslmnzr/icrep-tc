File: .\globals.css
------------------------------------------------------------
@tailwind base;
@tailwind components;
@tailwind utilities;

.a4-page {
  width: 210mm;
  height: 297mm;
  margin: 0 auto;
  background: white;
  overflow: auto;
}

@media print {
  body * {
    visibility: hidden;
  }
  .a4-page, .a4-page * {
    visibility: visible;
  }
  .a4-page {
    position: absolute;
    left: 0;
    top: 0;
    width: 210mm;
    height: 297mm;
  }
}

@page {
  size: A4;
  margin: 0;
}

File: .\layout.js
------------------------------------------------------------
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "ICREP TC APP",
  description: "Transfer Certificate Generator for ICREP",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}

File: .\page.js
------------------------------------------------------------
"use client"
import { useState, useEffect } from 'react'
import TCTable from './components/TCTable'
import TCPreview from './components/TCPreview'

export default function Home() {
  const [tcData, setTcData] = useState([])
  const [selectedTC, setSelectedTC] = useState(null)

  useEffect(() => {
    fetchData()
  }, [])

  const fetchData = async () => {
    try {
      const response = await fetch('/api/getSheetData');
      if (!response.ok) {
        throw new Error('Failed to fetch data');
      }
      const data = await response.json();
      setTcData(data);
    } catch (error) {
      console.error('Error fetching data:', error)
    }
  }

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">Transfer Certificate Manager</h1>
      <div className="flex">
        <div className="w-1/2 pr-2">
          <TCTable
            data={tcData}
            onPreview={(tc) => setSelectedTC(tc)}
            onPrint={(tc) => window.print()}
          />
        </div>
        <div className="w-1/2 pl-2">
          {selectedTC && (
            <TCPreview tc={selectedTC} />
          )}
        </div>
      </div>
    </div>
  )
}

File: .\api\getSheetData\route.js
------------------------------------------------------------
import { NextResponse } from 'next/server';
import { getSheetData } from '../../lib/sheets';

export async function GET() {
  try {
    const data = await getSheetData();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Error in getSheetData API route:', error);
    return NextResponse.json({ error: 'Failed to fetch sheet data', details: error.message }, { status: 500 });
  }
}

File: .\components\TCPreview.js
------------------------------------------------------------
import Image from 'next/image'

export default function TCPreview({ tc }) {
  const getFormattedDate = () => {
    const date = new Date()
    return date.toLocaleDateString('en-GB')
  }

  const fieldLabels = {
    tc_no: 'TC No.',
    date: 'Date',
    name_of_the_student: 'Name of the Student (In Block letters)',
    admission_no: 'Admission No.',
    student_id: 'Student ID',
    date_of_birth: 'Date of Birth',
    gender: 'Gender',
    religion_and_caste: 'Religion and Caste',
    date_of_admission: 'Date of Admission',
    name_of_the_program: 'Name of the Program',
    date_of_leaving: 'Date of Leaving',
    reason_for_leaving: 'Reason for Leaving',
    class_in_which_studied: 'Class in which studied',
    whether_qualified_for_promotion: 'Whether qualified for promotion',
    details_of_university_examination_attended: 'Details of University Examination Attended',
    reg_no_of_examination: 'Reg.No. of Examination',
    date_month_and_year_of_examination: 'Date/Month and year of examination',
    name_of_the_university_examination_for_which_the_student_last_attended: 'Name of the University Examination for which the student last attended',
    whether_passed_for_the_examination: 'Whether Passed for the examination',
    details_of_pending_examination_if_any: 'Details of Pending examination if any',
    whether_the_student_was_in_receipt_of_any_scholarships_concession: 'Whether the student was in receipt of any scholarships/Concession (If yes, Details)',
    whether_all_dues_have_been_paid: 'Whether all dues have been paid',
    remarks: 'Remarks'

  }

  return (
    <div className="a4-page bg-white shadow-lg p-4 text-sm border border-black">
      <div className="mb-4">
        <Image src="/header.png" alt="Logo" width={788} height={100}  />
      </div>

      <div className="flex justify-between items-center mb-4">
        <div>
          <span className="font-bold">T C No:</span> {tc['tc_no']}
        </div>
        <div>
          <span className="font-bold">Date:</span> {getFormattedDate()}
        </div>
      </div>

      <h2 className="text-2xl font-bold text-center mb-4">TRANSFER CERTIFICATE</h2>

      <div className="grid grid-cols-1 gap-1">
        {Object.entries(fieldLabels).map(([key, label]) => (
          <div key={key} className="flex">
            <span className="w-1/2 font-semibold break-words pr-2">{label}:</span>
            <span className="w-1/2">{tc[key]}</span>
          </div>
        ))}
      </div>

      <div className="mt-28 flex justify-between items-center">
        <p>Kochi -- 22</p>
        <p>(Office Seal)</p>
        <p>Hon. DIRECTOR</p>
      </div>

      <div className="border-t border-rose-500 mt-4 pt-2">
        <p className="text-center text-xs">
          Kochi - 682 022, Kerala, India, Email: icrep@cusat.c.in, Mob: +91 8078019688
        </p>
      </div>
    </div>
  )
}

File: .\components\TCTable.js
------------------------------------------------------------
export default function TCTable({ data, onPreview, onPrint }) {
    return (
      <table className="w-full border-collapse border border-gray-300 mb-4">
        <thead>
          <tr className="bg-gray-100">
            <th className="border border-gray-300 p-2">TC No</th>
            <th className="border border-gray-300 p-2">Name of Student</th>
            <th className="border border-gray-300 p-2">Actions</th>
          </tr>
        </thead>
        <tbody>
          {data.map((tc, index) => (
            <tr key={tc['TC.No.'] || index}>
              <td className="border border-gray-300 p-2">{tc['TC.No.']}</td>
              <td className="border border-gray-300 p-2">{tc['Name of the Student (In Block letters)']}</td>
              <td className="border border-gray-300 p-2">
                <button onClick={() => onPreview(tc)} className="bg-blue-500 text-white px-2 py-1 rounded mr-2">Preview</button>
                <button onClick={() => onPrint(tc)} className="bg-green-500 text-white px-2 py-1 rounded">Print</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    );
  }

File: .\lib\sheets.js
------------------------------------------------------------
import Sheets from 'node-sheets';

const SPREADSHEET_ID = '106sgh0eCeWVzH3LQdQcQ_CrMkPautXl51sp3TD1jMUk';
const SHEET_NAME = 'Sheet1';

export async function getSheetData() {
  try {
    console.log('Starting getSheetData function');
    const gs = new Sheets(SPREADSHEET_ID);
    console.log('Sheets instance created');
    const authData = {
      client_email: process.env.GOOGLE_CLIENT_EMAIL,
      private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
    };
    
    console.log('Attempting to authorize JWT');
    await gs.authorizeJWT(authData);
    console.log('JWT authorized successfully');
    
    console.log('Attempting to fetch table data');
    const table = await gs.tables(SHEET_NAME);
    console.log('Table data fetched successfully');
    
    return table.rows.map(row => {
      const formattedRow = {};
      for (const [key, value] of Object.entries(row)) {
        // Check if value is defined before accessing its 'value' property
        formattedRow[key.toLowerCase().replace(/\s+/g, '')] = value?.value || '';
      }
      return formattedRow;
    });
  } catch (error) {
    console.error('Detailed error in getSheetData:', error);
    throw error;
  }
}

