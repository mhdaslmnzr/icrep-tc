File: .\globals.css
------------------------------------------------------------
@tailwind base;
@tailwind components;
@tailwind utilities;

.a4-page {
  width: 210mm;
  height: 297mm;
  margin: 0 auto;
  background: white;
  overflow: hidden;
  position: relative;
}

@media screen and (max-width: 1200px) {
  .a4-page {
    transform: scale(0.9);
    transform-origin: top left;
  }
}

@media screen and (max-width: 992px) {
  .a4-page {
    transform: scale(0.8);
  }
}

@media screen and (max-width: 768px) {
  .a4-page {
    transform: scale(0.7);
  }
}

@media print {
  body * {
    visibility: hidden;
  }
  .a4-page, .a4-page * {
    visibility: visible;
  }
  .a4-page {
    position: absolute;
    left: 0;
    top: 0;
    width: 210mm;
    height: 297mm;
  }
}

@page {
  size: A4;
  margin: 0;
}

@keyframes dotAnimation {
  0%, 20% { opacity: 0; }
  50% { opacity: 1; }
  100% { opacity: 0; }
}

.dots .dot {
  animation: dotAnimation 1.4s infinite;
  display: inline-block;
}

.dots .dot:nth-child(2) {
  animation-delay: 0.2s;
}

.dots .dot:nth-child(3) {
  animation-delay: 0.4s;
}

File: .\layout.js
------------------------------------------------------------
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "ICREP TC APP",
  description: "Transfer Certificate Generator for ICREP",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}

File: .\page.js
------------------------------------------------------------
"use client"
import React, { useState, useEffect } from 'react';
import TCTable from './components/TCTable';
import TCPreview from './components/TCPreview';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import LoadingAnimation from './components/LoadingAnimation';

function useSheetData() {
    const [tcData, setTcData] = useState([]);
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(true);
  
    async function fetchData() {
      try {
        const response = await fetch(`/api/getSheetData?t=${Date.now()}`);
        if (!response.ok) {
          throw new Error('Failed to fetch data');
        }
        const data = await response.json();
        console.log('Fetched data:', data);  // Log the fetched data
        setTcData(data);
      } catch (error) {
        console.error('Error fetching data:', error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    }
  
    useEffect(() => {
      fetchData();
    }, []);
  
    return { tcData, error, loading, refreshData: fetchData };
  }

export default function Home() {
  const { tcData, error, loading, refreshData } = useSheetData();
  const [selectedTC, setSelectedTC] = useState(null);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isDownloadingTC, setIsDownloadingTC] = useState(false);
  const [isDownloadingCC, setIsDownloadingCC] = useState(false);

  const handleRefresh = async () => {
    setIsRefreshing(true);
    await refreshData();
    setIsRefreshing(false);
  };

  const handleTCDownload = async (tc) => {
    setIsDownloadingTC(true);
    const inputOriginal = document.getElementById('tc-preview-original');
    const inputCopy = document.getElementById('tc-preview-copy');
  
    if (!inputOriginal || !inputCopy) {
      console.error('TC Preview elements not found');
      setIsDownloadingTC(false);
      return;
    }
  
    try {
      await new Promise(resolve => setTimeout(resolve, 500));
  
      const canvasOriginal = await html2canvas(inputOriginal, { scale: 2, logging: false, useCORS: true });
      const canvasCopy = await html2canvas(inputCopy, { scale: 2, logging: false, useCORS: true });
  
      const imgDataOriginal = canvasOriginal.toDataURL('image/jpeg', 1.0);
      const imgDataCopy = canvasCopy.toDataURL('image/jpeg', 1.0);
  
      const pdf = new jsPDF('p', 'mm', 'a4');
  
      pdf.addImage(imgDataOriginal, 'JPEG', 0, 0, 210, 297);
      pdf.addPage();
      pdf.addImage(imgDataCopy, 'JPEG', 0, 0, 210, 297);
  
      pdf.save(`${tc.tcno}_${tc.nameofthestudent.replace(/\s+/g, '_')}_TC.pdf`);
    } catch (error) {
      console.error('Error generating TC PDF:', error);
      alert('Failed to generate TC PDF. Please try again.');
    } finally {
      setIsDownloadingTC(false);
    }
  };

  const handleCCDownload = async (tc) => {
    setIsDownloadingCC(true);
    const conductOriginal = document.getElementById('conduct-certificate-original');
    const conductCopy = document.getElementById('conduct-certificate-copy');

    if (!conductOriginal || !conductCopy) {
      console.error('Conduct Certificate elements not found');
      setIsDownloadingCC(false);
      return;
    }

    try {
      await new Promise(resolve => setTimeout(resolve, 500));

      const canvasConductOriginal = await html2canvas(conductOriginal, { scale: 2, logging: false, useCORS: true });
      const canvasConductCopy = await html2canvas(conductCopy, { scale: 2, logging: false, useCORS: true });

      const imgDataConductOriginal = canvasConductOriginal.toDataURL('image/jpeg', 1.0);
      const imgDataConductCopy = canvasConductCopy.toDataURL('image/jpeg', 1.0);

      const pdf = new jsPDF('l', 'mm', [220, 180]);

      pdf.addImage(imgDataConductOriginal, 'JPEG', 0, 0, 220, 180);
      pdf.addPage();
      pdf.addImage(imgDataConductCopy, 'JPEG', 0, 0, 220, 180);

      pdf.save(`${tc.ccno}_${tc.nameofthestudent.replace(/\s+/g, '_')}_CC.pdf`);
    } catch (error) {
      console.error('Error generating CC PDF:', error);
      alert('Failed to generate CC PDF. Please try again.');
    } finally {
      setIsDownloadingCC(false);
    }
  };

  return (
    <div className="flex h-screen">
      <div className="w-1/2 p-4 overflow-y-auto">
        {loading ? (
          <LoadingAnimation />
        ) : error ? (
          <div>Error: {error}</div>
        ) : (
          <TCTable 
            tcData={tcData} 
            onPreview={setSelectedTC} 
            onRefresh={handleRefresh}
            isRefreshing={isRefreshing}
          />
        )}
      </div>
      <div className="w-1/2 p-4 overflow-y-auto">
        {selectedTC && (
          <TCPreview 
            tc={selectedTC} 
            onTCDownload={() => handleTCDownload(selectedTC)}
            onCCDownload={() => handleCCDownload(selectedTC)}
            isDownloadingTC={isDownloadingTC}
            isDownloadingCC={isDownloadingCC}
          />
        )}
      </div>
    </div>
  );
}

File: .\api\getSheetData\route.js
------------------------------------------------------------
import { NextResponse } from 'next/server';
import { getSheetData } from '../../lib/sheets';

export async function GET() {
  try {
    const data = await getSheetData();
    
    // Add cache control headers
    const headers = new Headers();
    headers.append('Cache-Control', 'no-store, max-age=0');
    
    // Log the data for debugging
    console.log('API Data:', JSON.stringify(data));

    return new NextResponse(JSON.stringify(data), {
      status: 200,
      headers: headers,
    });
  } catch (error) {
    console.error('Error in getSheetData API route:', error);
    return NextResponse.json({ error: 'Failed to fetch sheet data', details: error.message }, { status: 500 });
  }
}

File: .\components\ConductCertificatePreview.js
------------------------------------------------------------
import Image from "next/image";

export default function ConductCertificatePreview({ data, isCopy = false }) {
  
    const getFormattedDate = () => {
        const date = new Date();
        return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
      };

      const formatDate = (dateString) => {
        if (!dateString) return '';
        const date = new Date(dateString);
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
      };

  return (
    <div className="conduct-certificate-page bg-white p-4 text-sm relative" style={{ width: '220mm', height: '180mm' }}>
      <div className="absolute inset-2 border-4 border-black pointer-events-none"></div>
      <div className="relative z-10 flex flex-col justify-between h-full px-4">
        <div>
          <div className="my-8">
            <Image 
              src="/header.png" 
              alt="Certificate Header" 
              width={830}
              height={150}
            />
          </div>
          
          <div className="my-12">
            <div className="flex justify-between text-sm">
                <div>
                    <span className="font-bold">CC No: </span><span>{data.ccno}</span>
                </div>
                <div>
                    <span className="font-bold">Date: </span><span>{getFormattedDate()}</span>
                </div>
            </div>
            <h4 className="text-center font-bold my-12 text-3xl underline">
              COURSE AND CONDUCT CERTIFICATE
              {isCopy && <span className="text-zinc-300 italic">(o/c)</span>}
            </h4>
            <p className="mt-8 px-12 text-justify text-lg">
              This is to certify that Sri/Kum. 
              <span className="font-semibold"> {data.nameofthestudent} </span> 
              (Student ID: <span className="font-semibold">{data.studentid}</span>) 
              is/was a student of this Centre for his/her
              <span className="font-semibold"> {data.nameoftheprogram} </span> course from
              <span className="font-semibold"> {formatDate(data.dateofadmission)} </span> to <span className="font-semibold">{formatDate(data.dateofleaving)}</span>. 
              His/her conduct and character is/was<span className="px-1 mx-1"> ..................................</span>during the period.
            </p>
          </div>
        </div>
        <div className="mt-auto">
          <div className="flex justify-between items-end font-bold">
            <p>Kochi -- 22</p>
            <p>(Office Seal)</p>
            <p>Hon. DIRECTOR</p>
          </div>
          <div className="border-t border-rose-500 my-4 pt-1">
            <p className="text-center text-[10px]">Kochi - 682 022, Kerala, India, Email: icrep@cusat.ac.in, Mob: +91 8078019688</p>
          </div>
        </div>
      </div>
    </div>
  );
}

File: .\components\LoadingAnimation.js
------------------------------------------------------------
import React from 'react';

const LoadingAnimation = () => {
  return (
    <div className="flex flex-col items-center justify-center h-full">
      <h2 className="mb-4 text-2xl font-semibold text-gray-900 animate-pulse">
        ICREP TC Generator Loading
        <span className="dots">
          <span className="dot">.</span>
          <span className="dot">.</span>
          <span className="dot">.</span>
        </span>
      </h2>      
    </div>
  );
};

export default LoadingAnimation;

File: .\components\TCPreview.js
------------------------------------------------------------
import Image from "next/image";
import ConductCertificatePreview from "./ConductCertificatePreview";


const fieldLabels = {
  nameofthestudent: 'Name of the Student',
  admissionno: 'Admission Number',
  studentid: 'Student ID',
  dateofbirth: 'Date of Birth',
  gender: 'Gender',
  religionandcaste: 'Religion and Caste',
  nameoftheprogram: 'Name of the Program for which the student admitted',
  dateofadmission: 'Date of Admission',
  dateofleaving: 'Date of Leaving',
  reasonforleaving: 'Reason for Leaving',
  classinwhichstudied: 'Class in which studied at the time of leaving',
  whetherqualifiedforpromotion: 'Whether qualified for promotion',
  detailsofuniversityexaminationattended: 'Details of University Examination Attended',
  regnoofexamination: 'Registration Number of Examination',
  datemonthandyearofexamination: 'Month and year of examination',
  nameoftheuniversityexaminationforwhichthestudentlastattended: 'Name of the University Examination for which the student last attended',
  whetherpassedfortheexamination: 'Whether Passed for the examination',
  detailsofpendingexaminationifany: 'Details of Pending examination if any',
  whetherthestudentwasinreceiptofanyscholarshipsconcession: 'Whether the student was in receipt of any scholarships/Concession (If yes, Details)',
  whetheralldueshavebeenpaid: 'Whether all dues have been paid',
  remarks: 'Remarks'
};

export default function TCPreview({ tc,onTCDownload, onCCDownload, isDownloadingTC, isDownloadingCC }) {
  const getFormattedDate = () => new Date().toLocaleDateString('en-GB');

  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return isNaN(date.getTime()) ? dateString : date.toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' });
  };

  const formattedData = Object.entries(fieldLabels).map(([key, label]) => ({
    label,
    value: key === 'datemonthandyearofexamination' ? tc[key] : (key.includes('date') ? formatDate(tc[key]) : tc[key])
  }));

  return (
    <div className="flex flex-col items-center">
      <div className="flex justify-between items-center mt-4 bg-white w-full mb-4">
        <h1 className="text-3xl font-bold">Preview</h1>
        <div>
          <button 
            className="px-2 py-1 bg-blue-500 text-white rounded mr-2"
            onClick={onTCDownload}
            disabled={isDownloadingTC || isDownloadingCC}
          >
            {isDownloadingTC ? 'Downloading TC...' : 'Download TC'}
          </button>
          <button 
            className="px-2 py-1 bg-green-500 text-white rounded"
            onClick={onCCDownload}
            disabled={isDownloadingTC || isDownloadingCC}
          >
            {isDownloadingCC ? 'Downloading CC...' : 'Download CC'}
          </button>
        </div>
      </div>

      <div className="flex flex-col items-center w-full">
      <div id="tc-preview-original" className="a4-page bg-white p-8 text-sm relative">
        <div className="absolute inset-4 border-4 border-black pointer-events-none"></div>
        <div className="relative z-10 flex flex-col justify-between min-h-[calc(297mm-4rem)] px-4">
          <div>
            <div className="mb-8">
              <Image src="/header.png" alt="Logo" width={788} height={100} />
            </div>
            <div className="flex justify-between items-center mb-8">
              <div><span className="font-bold">T C No:</span> {tc['tcno']}</div>
              <div><span className="font-bold">Date:</span> {getFormattedDate()}</div>
            </div>
            <h2 className="text-4xl font-bold text-center mb-8">TRANSFER CERTIFICATE</h2>
            <div className="grid grid-cols-1 gap-2 px-8">
              {formattedData.map(({ label, value }) => (
                <div key={label} className="flex items-center">
                  <div className="w-1/2 font-semibold break-words pr-2 text-left flex items-center min-h-[1.5em]">{label}</div>
                  <div className="w-8 text-center">:</div>
                  <div className="flex-1 pl-2 flex items-center min-h-[1.5em]">{value}</div>
                </div>
              ))}
            </div>
          </div>
          <div className="mt-auto">
            <div className="flex justify-between items-center font-semibold">
              <p>Kochi -- 22</p>
              <p>(Office Seal)</p>
              <p>Hon. DIRECTOR</p>
            </div>
            <div className="border-t border-rose-500 mt-4 pt-1">
              <p className="text-center text-[10px]">Kochi - 682 022, Kerala, India, Email: icrep@cusat.ac.in, Mob: +91 8078019688</p>
            </div>
          </div>
        </div>
      </div>

      <div id="tc-preview-copy" className="a4-page bg-white p-8 text-sm relative block">
        <div className="absolute inset-4 border-4 border-black pointer-events-none"></div>
        <div className="relative z-10 flex flex-col justify-between min-h-[calc(297mm-4rem)] px-4">
          <div>
            <div className="mb-8">
              <Image src="/header.png" alt="Logo" width={788} height={100} />
            </div>
            <div className="flex justify-between items-center mb-8">
              <div><span className="font-bold">T C No:</span> {tc['tcno']}</div>
              <div><span className="font-bold">Date:</span> {getFormattedDate()}</div>
            </div>
            <h2 className="text-4xl font-bold text-center mb-8">TRANSFER CERTIFICATE<span className="text-zinc-300 italic">(o/c)</span></h2>
            <div className="grid grid-cols-1 gap-2 px-8">
              {formattedData.map(({ label, value }) => (
                <div key={label} className="flex items-center">
                  <div className="w-1/2 font-semibold break-words pr-2 text-left flex items-center min-h-[1.5em]">{label}</div>
                  <div className="w-8 text-center">:</div>
                  <div className="flex-1 pl-2 flex items-center min-h-[1.5em]">{value}</div>
                </div>
              ))}
            </div>
          </div>
          <div className="mt-auto">
            <div className="flex justify-between items-center font-semibold">
              <p>Kochi -- 22</p>
              <p>(Office Seal)</p>
              <p>Hon. DIRECTOR</p>
            </div>
            <div className="border-t border-rose-500 mt-4 pt-1">
              <p className="text-center text-[10px]">Kochi - 682 022, Kerala, India, Email: icrep@cusat.ac.in, Mob: +91 8078019688</p>
            </div>
          </div>
        </div>
      </div>
      
      <div id="conduct-certificate-original" className="mt-8">
        <ConductCertificatePreview data={tc} />
      </div>

      <div id="conduct-certificate-copy" className="mt-8">
        <ConductCertificatePreview data={tc} isCopy={true} />
      </div>
    </div>
    </div>
  );
}


File: .\components\TCTable.js
------------------------------------------------------------
import React, { memo } from 'react';

const TCTable = memo(function TCTable({ 
  tcData, 
  onPreview,
  onRefresh, 
  isRefreshing
}) {
  const reversedData = [...tcData].reverse();

  return (
    <div className="flex flex-col h-full">
      <div className="flex justify-between items-center my-4 bg-white">
        <h1 className="text-3xl font-bold">ICREP TC GENERATOR</h1>
        <button 
          className="px-4 py-2 bg-orange-500 text-white rounded flex items-center"
          onClick={onRefresh}
          disabled={isRefreshing}
        >
          {isRefreshing ? (
            <>
              <svg className="animate-spin h-5 w-5 mr-3" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Refreshing...
            </>
          ) : (
            'Refresh'
          )}
        </button>
      </div>
      <div className="overflow-y-auto flex-grow">
        <table className="w-full border-collapse border border-gray-300">
          <thead className="sticky top-0 bg-slate-600 text-white">
            <tr>
              <th className="border border-gray-300 px-4 py-2 w-1/4">TC Number</th>
              <th className="border border-gray-300 px-4 py-2 w-1/2">Name of the Student</th>
              <th className="border border-gray-300 px-4 py-2 w-1/4">Actions</th>
            </tr>
          </thead>
          <tbody>
            {reversedData.map((tc, index) => (
              <tr key={index}>
                <td className="border border-gray-300 px-4 py-2">{tc.tcno}</td>
                <td className="border border-gray-300 px-4 py-2">{tc.nameofthestudent}</td>
                <td className="border border-gray-300 px-4 py-2 text-center">
                  <button
                    className="px-2 py-1 bg-green-500 text-white rounded"
                    onClick={() => onPreview(tc)}
                  >
                    Preview
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
});

export default TCTable;

File: .\lib\sheets.js
------------------------------------------------------------
import Sheets from 'node-sheets';

const SPREADSHEET_ID = '106sgh0eCeWVzH3LQdQcQ_CrMkPautXl51sp3TD1jMUk';
const SHEET_NAME = 'Sheet1';

export async function getSheetData() {
  try {
    console.log('Starting getSheetData function');
    const gs = new Sheets(SPREADSHEET_ID);
    console.log('Sheets instance created');
    const authData = {
      client_email: process.env.GOOGLE_CLIENT_EMAIL,
      private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
    };
    
    console.log('Attempting to authorize JWT');
    await gs.authorizeJWT(authData);
    console.log('JWT authorized successfully');
    
    console.log('Attempting to fetch table data');
    const table = await gs.tables(SHEET_NAME);
    console.log('Table data fetched successfully');
    
    const formattedData = table.rows.map(row => {
      const formattedRow = {};
      for (const [key, value] of Object.entries(row)) {
        formattedRow[key.toLowerCase().replace(/\s+/g, '')] = value?.value || '';
      }
      return formattedRow;
    });

    console.log('Formatted data:', JSON.stringify(formattedData));
    return formattedData;
  } catch (error) {
    console.error('Detailed error in getSheetData:', error);
    throw error;
  }
}

